#ifndef __CONJUNTO_H__
#define __CONJUNTO_H__
#define TAM 1000
#include <stdbool.h>

typedef int DATO;

typedef struct __Conjunto{
    DATO datos[TAM];
    short cant;
} CONJUNTO;

CONJUNTO conjunto_vacio();
CONJUNTO agregar(CONJUNTO, DATO);
bool pertenece(CONJUNTO, DATO);
CONJUNTO quitar(CONJUNTO, DATO);
bool es_vacio(CONJUNTO);
int cardinal(CONJUNTO);
CONJUNTO _union(CONJUNTO c, CONJUNTO d);
void printf_conjunto(CONJUNTO);

#endif

#include <stdio.h>
#include "conjunto.h"

int main(){
    CONJUNTO c, d, e;
    c = conjunto_vacio();
    d = conjunto_vacio();
    e = conjunto_vacio();
    print_conjunto(c);
    print_conjunto(d);
    print_conjunto(e);

    printf("El conjunto c esta vacio %d\n", es_vacio(c));
    c = agregar(c, 2);
    c = agregar(c, 3);
    c = agregar(c, 19);
    c = agregar(c, 11);
    c = agregar(c, 15);
    print_conjunto(c);

    d = agregar(d, 7);
    d = agregar(d, 1);
    d = agregar(d, 3);
    d = agregar(d, 4);
    print_conjunto(d);


    e = _union(c, d);
    print_conjunto(e);

    return 0;
}

#include "conjunto.h"
#include <stdio.h>
//#include "conjunto.h" esto es para las bibliotecas del compilador

CONJUNTO conjunto_vacio(){
    CONJUNTO C;
    c.cant=0;
    return c;
}

CONJUNTO agregar(CONJUNTO c, DATO d){
    CONJUNTO t = c;
    if(!pertenece(t, d) && t.cant < TAM){
        t.datos[t.cant] = d;
        t.cant++;
    }
    return t;
}

bool pertenece(CONJUNTO c, DATO d){
    if(!es_vacio(c)){
        for(int i=0; i< c.cant; i++){
            if(c.datos[i]==d) return true;
        }
    }
    return false;
}

CONJUNTO quitar(CONJUNTO c, DATO d){
    CONJUNTO t = c;
    int i = 0;
    if(pertenece(t, d)){
        for( ; i < t.cant;i++){
            if(t.datos[i]==d) break;     
        }

        if(i != t.cant -1){
            for(int j=i+1; j< t.cant; j++){
                t.datos[j-1] = t.datos[j];
            }
        }
        t.cant--;         
        }
    return t;
}

bool es_vacio(CONJUNTO c){
    return c.cant ==0;
}

int cardinal(CONJUNTO c){
    return c.cant;
}

CONJUNTO _union(CONJUNTO c, CONJUNTO d){
    CONJUNTO t = c;
        for(int i=0; i < d.cant; i++){
            t = agregar(t, d.datos[i]);
    }
    return t;
}

print_conjunto(CONJUNTO c){
    printf("{ ");
    for(int i = 0; i < c.cant; i++){
        printf("%d ", c.datos[i]);
    }
    printf("}\n");
}
